campaignTrail_temp.election_json = [
    {
        "model": "campaign_trail.election",
        "pk": 20,
        "fields": {
            "year": 2016,
            "display_year": "2024b",
            "summary": "<p>A country left fractured by 4 years, 2 impeachments, and 1 insurrection, plagued by a deadly virus killing hundreds of thousands, and an economy worsening day by day. Joe Biden faces an uphill battle for re-election, should he choose to run.</p>\n<p>Alongside him stands Kamala Harris, loyal to a fault. Should Biden choose to step aside, her path to the nomination is narrow but doable for a savant.</p>\n<p>Can you truly heal the soul of a nation fractured as much as America's has been?",
            "image_url": "https://i.imgur.com/MSHvy36.jpeg",
            "winning_electoral_vote_number": 270,
            "advisor_url": "https://i.imgur.com/LtLG1QF.png",
            "recommended_reading": "<ul>\n<li><a href=https://www.chicagotribune.com/opinion/editorials/ct-edit-chicago-tribune-biden-endorsement-20200925-lnyxsb5qvrftnjjmj3rnzj33jy-story.html>Our Case For Joe Biden</a></li>\n<li><a href=https://nationalinterest.org/feature/case-trump-166808>The Case For Trump</a></li>\n<li><a href=https://www.npr.org/2020/11/18/935730100/how-biden-won-ramping-up-the-base-and-expanding-margins-in-the-suburbs>How Biden Won: Ramping Up The Base And Expanding Margins In The Suburbs</a></li>\n<li><a href=https://www.prospectmagazine.co.uk/politics/donald-trump-joe-biden-us-election-almost-win-votes-concede>Why Did Trump Almost Win?</a></li>\n<li><a href=https://www.hoover.org/research/no-evidence-voter-fraud-guide-statistical-claims-about-2020-election>No Evidence For Voter Fraud: A Guide To Statistical Claims About The 2020 Election</a></li>\n</ul>",
            "has_visits": 1,
            "no_electoral_majority_image": "../static/images/2012-no-majority.jpg"
        }
    }
]

campaignTrail_temp.temp_election_list = [
    {
        "id": 20,
        "year": 2016,
        "is_premium": 0,
        "display_year": "2024b"
    }
]

campaignTrail_temp.credits = "Not Dan Bryan"

campaignTrail_temp.global_parameter_json = [
    {
        "model": "campaign_trail.global_parameter",
        "pk": 1,
        "fields": {
            "vote_variable": 1.125,
            "max_swing": 0.12,
            "start_point": 0.94,
            "candidate_issue_weight": 10,
            "running_mate_issue_weight": 3,
            "issue_stance_1_max": -0.71,
            "issue_stance_2_max": -0.3,
            "issue_stance_3_max": -0.125,
            "issue_stance_4_max": 0.125,
            "issue_stance_5_max": 0.3,
            "issue_stance_6_max": 0.71,
            "global_variance": 0.01,
            "state_variance": 0.005,
            "question_count": 18,
            "default_map_color_hex": "#C9C9C9",
            "no_state_map_color_hex": "#999999"
        }
    }
]

campaignTrail_temp.candidate_json = [
    {
        "model": "campaign_trail.candidate",
        "pk": 201,
        "fields": {
            "first_name": "Joe",
            "last_name": "Biden",
            "election": 20,
            "party": "Democratic",
            "state": "Delaware",
            "priority": 1,
            "description": "<p>ehhhh im joe biden jack, no malarkey.</p>",
            "color_hex": "#CEE2F8",
            "secondary_color_hex": null,
            "is_active": 1,
            "image_url": "https://i.imgur.com/ozHMG4o.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 1002,
        "fields": {
            "first_name": "Kamala",
            "last_name": "Harris",
            "election": 20,
            "party": "Democratic",
            "state": "California",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#0000FF",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://i.imgur.com/QiAmVnq.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": "<p>if she wins</p>",
            "candidate_score": 1,
            "running_mate": true
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 200,
        "fields": {
            "first_name": "Donald",
            "last_name": "Trump",
            "election": 20,
            "party": "Republican",
            "state": "Florida",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#FF8080",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://i.imgur.com/jvPKCUL.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 203,
        "fields": {
            "first_name": "Left-wing",
            "last_name": "Nuts",
            "election": 20,
            "party": "Green",
            "state": "Kooksville",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#17aa5c",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/candidateexample.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    },
    {
        "model": "campaign_trail.candidate",
        "pk": 202,
        "fields": {
            "first_name": "Libertarian",
            "last_name": "Bozos",
            "election": 20,
            "party": "Libertarian",
            "state": "Idaho",
            "priority": 1,
            "description": "<p>Put description here</p>",
            "color_hex": "#fed105",
            "secondary_color_hex": null,
            "is_active": 0,
            "image_url": "https://www.jetsimon.com/public/candidateexample.png",
            "electoral_victory_message": "This guy wins!",
            "electoral_loss_message": "This guy loses!",
            "no_electoral_majority_message": "We all win?",
            "description_as_running_mate": null,
            "candidate_score": 1,
            "running_mate": false
        }
    }
]

campaignTrail_temp.running_mate_json = [
    {
        "model": "campaign_trail.running_mate",
        "pk": 109261,
        "fields": {
            "candidate": 201,
            "running_mate": 1002
        }
    }
]

campaignTrail_temp.opponents_default_json = [
    {
        "election": 20,
        "candidates": [
            201,
            200,
            203,
            202
        ]
    }
]

campaignTrail_temp.opponents_weighted_json = [
    {
        "election": 20,
        "candidates": [
            201,
            200,
            203,
            202
        ]
    }
]

jet_data = {
    "headerColor": "#48254b",
    "windowColor": "#e4cdf1",
    "containerColor": "#680781",
    "innerWindowColor": "#E8FBFF",
    "bannerImageUrl": "https://i.imgur.com/1yIshYj.jpeg",
    "backgroundImageUrl": "https://coolbackgrounds.io/images/backgrounds/white/pure-white-background-85a2a7fd.jpg",
    "endingTextColor": "#000000",
    "customQuote": ""
}

//#startcode



nct_stuff.themes[nct_stuff.selectedTheme].coloring_title = "#48254b";

nct_stuff.themes[nct_stuff.selectedTheme].coloring_window = "#e4cdf1";

document.getElementsByClassName("game_header")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_title;

$("#game_window")[0].style.backgroundColor = nct_stuff.themes[nct_stuff.selectedTheme].coloring_window;

$(".container")[0].style.backgroundColor = "#680781";

document.getElementById("header").src = "https://i.imgur.com/1yIshYj.jpeg";

document.body.background = "https://coolbackgrounds.io/images/backgrounds/white/pure-white-background-85a2a7fd.jpg";

document.head.innerHTML += "<style>#results_container {color:#000000;} .inner_window_w_desc {background-color:#E8FBFF!important;}</style>";

//#endcode

// Mutation Observer Setup (unchanged)
const windowsAdvisorObserver = new MutationObserver((mutationList, observer) => {
    const visitWindow = document.getElementsByClassName("overlay_window")[0];
    if (!visitWindow || visitWindow.classList.contains("done")) return;
    
    visitWindow.classList.add("done", "window");
    const titleBar = visitWindow.querySelector("h3");
    if (titleBar) {
        titleBar.classList.add("title-bar", "title-bar-text");
        titleBar.style.paddingLeft = "3px";
    }
});

windowsAdvisorObserver.observe(document.getElementById("game_window"), {
    attributes: true,
    childList: true,
    subtree: true
});

// Music Player Classes (unchanged)
class Song {
    constructor(title, artist, album, coverLink, audioLink) {
        this.title = title;
        this.artist = artist;
        this.album = album;
        this.coverLink = coverLink;
        this.audioLink = audioLink;
    }
}

class Playlist {
    constructor() {
        this.songs = [];
        this.currentSongIndex = 0;
    }

    addSong(song) {
        this.songs.push(song);
    }

    getCurrentSong() {
        return this.songs[this.currentSongIndex];
    }

    playNext() {
        this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
    }

    playPrevious() {
        this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
    }
}

// DOM Helper Functions (unchanged)
function createElement(type, className, innerHTML, attributes = {}) {
    const element = document.createElement(type);
    if (className) element.className = className;
    if (innerHTML) element.innerHTML = innerHTML;
    Object.entries(attributes).forEach(([attr, value]) => element.setAttribute(attr, value));
    return element;
}

function formatTime(seconds) {
    if (isNaN(seconds)) return "0:00";
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
}

// Player UI Functions
function updateUI(playlist) {
    const currentSong = playlist.getCurrentSong();
    const player = document.getElementById("player");
    
    if (player) {
        const coverElement = player.querySelector("#cover");
        const titleElement = player.querySelector("#title");
        const artistElement = player.querySelector("#artist");
        const albumElement = player.querySelector("#album");
        
        if (coverElement) coverElement.src = currentSong.coverLink;
        if (titleElement) titleElement.textContent = currentSong.title;
        if (artistElement) artistElement.textContent = currentSong.artist;
        if (albumElement) albumElement.innerHTML = `<em>${currentSong.album}</em>`;
        
        // Update upcoming tracks list
        const upcomingList = player.querySelector(".vista-upcoming-list");
        if (upcomingList) {
            upcomingList.innerHTML = "";
            const upcomingSongs = playlist.songs.slice(playlist.currentSongIndex + 1);
            upcomingSongs.forEach((song, index) => {
                const item = createElement("div", "vista-upcoming-item");
                item.innerHTML = `
                    <span class="vista-upcoming-number">${index + 1}.</span>
                    <span class="vista-upcoming-title">${song.title}</span>
                    <span class="vista-upcoming-artist">${song.artist}</span>
                `;
                upcomingList.appendChild(item);
            });
        }
    }
}

// Event Listeners (unchanged)
function setupEventListeners(playlist, audio) {
    const playPauseButton = document.querySelector(".vista-play-btn");
    const nextButton = document.querySelector(".vista-next-btn");
    const prevButton = document.querySelector(".vista-prev-btn");
    const volumeSlider = document.querySelector(".vista-volume-slider");
    const progressTrack = document.querySelector(".vista-progress-track");
    
    playPauseButton?.addEventListener("click", () => {
        if (audio.paused) {
            audio.play().then(() => {
                playPauseButton.innerHTML = `
                    <svg viewBox="0 0 24 24" width="24" height="24">
                        <rect x="6" y="4" width="4" height="16" fill="currentColor"/>
                        <rect x="14" y="4" width="4" height="16" fill="currentColor"/>
                    </svg>
                `;
                playPauseButton.classList.add("vista-pause-btn");
                playPauseButton.classList.remove("vista-play-btn");
            }).catch(e => {
                console.log("Playback prevented:", e);
                playPauseButton.innerHTML = `
                    <svg viewBox="0 0 24 24" width="24" height="24">
                        <path d="M8 5v14l11-7z" fill="currentColor"/>
                    </svg>
                `;
            });
        } else {
            audio.pause();
            playPauseButton.innerHTML = `
                <svg viewBox="0 0 24 24" width="24" height="24">
                    <path d="M8 5v14l11-7z" fill="currentColor"/>
                </svg>
            `;
            playPauseButton.classList.add("vista-play-btn");
            playPauseButton.classList.remove("vista-pause-btn");
        }
    });

    nextButton?.addEventListener("click", () => {
        playlist.playNext();
        updateUI(playlist);
        audio.src = playlist.getCurrentSong().audioLink;
        audio.play().catch(e => console.log("Autoplay prevented:", e));
    });

    prevButton?.addEventListener("click", () => {
        playlist.playPrevious();
        updateUI(playlist);
        audio.src = playlist.getCurrentSong().audioLink;
        audio.play().catch(e => console.log("Autoplay prevented:", e));
    });

    volumeSlider?.addEventListener("input", (e) => {
        const val = volumeSlider.value;
        audio.volume = val / 100;
        volumeSlider.style.setProperty('--volume-level', `${val}%`);
    });

    progressTrack?.addEventListener("click", (e) => {
        const rect = progressTrack.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        audio.currentTime = pos * audio.duration;
    });

    audio.addEventListener("timeupdate", () => {
        const progressFill = document.querySelector(".vista-progress-fill");
        const currentTimeDisplay = document.querySelector(".vista-current-time");
        
        if (progressFill) {
            progressFill.style.width = `${(audio.currentTime / audio.duration) * 100}%`;
        }
        
        if (currentTimeDisplay) {
            currentTimeDisplay.textContent = formatTime(audio.currentTime);
            const durationDisplay = document.querySelector(".vista-duration");
            if (durationDisplay && !isNaN(audio.duration)) {
                durationDisplay.textContent = formatTime(audio.duration);
            }
        }
    });

    audio.addEventListener("ended", () => {
        playlist.playNext();
        updateUI(playlist);
        audio.src = playlist.getCurrentSong().audioLink;
        audio.play().catch(e => console.log("Autoplay prevented:", e));
    });
}

function createPlayerUI() {
    const playerContainer = createElement("div", "vista-player", "", { id: "player" });
    
    // Title Bar
    playerContainer.appendChild(createElement("div", "vista-title-bar", `
            <div class="vista-title-text">Spotify</div>
            <div class="vista-title-controls">
                <button class="vista-close">
                    <svg width="12" height="12" viewBox="0 0 12 12">
                        <circle cx="6" cy="6" r="5.5" fill="#FF5F56" stroke="#E0443E"/>
                        <path d="M4,4 L8,8 M8,4 L4,8" stroke="black" stroke-width="0.7" opacity="0.7"/>
                    </svg>
                </button>
                <button class="vista-minimize">
                    <svg width="12" height="12" viewBox="0 0 12 12">
                        <circle cx="6" cy="6" r="5.5" fill="#FFBD2E" stroke="#DEA123"/>
                        <path d="M4,6 L8,6" stroke="black" stroke-width="0.7" opacity="0.7"/>
                    </svg>
                </button>
                <button class="vista-maximize">
                    <svg width="12" height="12" viewBox="0 0 12 12">
                        <circle cx="6" cy="6" r="5.5" fill="#27C93F" stroke="#1AAB29"/>
                        <path d="M5,4.5 L7,4.5 L7,7.5 L5,7.5 Z" fill="none" stroke="black" stroke-width="0.7" opacity="0.7"/>
                    </svg>
                </button>
            </div>
    `));

    // Main Content
    const mainContent = createElement("div", "vista-main-content");
    
    // Left Column - Album Art
    const leftColumn = createElement("div", "vista-left-column");
    const coverElement = createElement("img", "vista-cover", "", { 
        id: "cover",
        alt: "Album Cover"
    });
    leftColumn.appendChild(coverElement);
    
    // Center Column - Song Info and Controls
    const centerColumn = createElement("div", "vista-center-column");
    
    // Song Info
    const songInfo = createElement("div", "vista-song-info");
    songInfo.innerHTML = `
        <h3 id="title" class="vista-title">Song Title</h3>
        <p id="artist" class="vista-artist">Artist Name</p>
        <p id="album" class="vista-album"><em>Album Name</em></p>
    `;
    
    // Controls
    const controlsContainer = createElement("div", "vista-controls-container");
    controlsContainer.innerHTML = `
        <div class="vista-controls">
            <button class="vista-control-btn vista-prev-btn" aria-label="Previous track">
                <svg viewBox="0 0 24 24" width="24" height="24">
                    <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z" fill="currentColor"/>
                </svg>
            </button>
            <button class="vista-control-btn vista-play-btn" aria-label="Play/Pause">
                <svg viewBox="0 0 24 24" width="24" height="24">
                    <path d="M8 5v14l11-7z" fill="currentColor"/>
                </svg>
            </button>
            <button class="vista-control-btn vista-next-btn" aria-label="Next track">
                <svg viewBox="0 0 24 24" width="24" height="24">
                    <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z" fill="currentColor"/>
                </svg>
            </button>
        </div>
        <div class="vista-progress-container">
            <div class="vista-progress-bar">
                <div class="vista-progress-track" role="slider" aria-valuemin="0" aria-valuemax="100" tabindex="0">
                    <div class="vista-progress-fill"></div>
                </div>
                <div class="vista-time-display">
                    <span class="vista-current-time">0:00</span>
                    <span class="vista-duration">0:00</span>
                </div>
            </div>
        </div>
    `;
    
    centerColumn.append(songInfo, controlsContainer);
    
    // Right Column - Upcoming Tracks
    const rightColumn = createElement("div", "vista-right-column");
    rightColumn.innerHTML = `
        <div class="vista-upcoming-header">Your Top Tracks</div>
        <div class="vista-upcoming-list"></div>
    `;
    
    // Volume Control (moved to left column)
    const volumeControl = createElement("div", "vista-volume-container", `
        <div class="vista-volume-control">
            <input type="range" min="0" max="100" value="50" 
                class="vista-volume-slider" aria-label="Volume control">
            <div class="vista-volume-icons">
                <svg class="vista-volume-icon" viewBox="0 0 24 24" width="18" height="18">
                    <path fill="currentColor" d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
                </svg>
                <svg class="vista-volume-icon" viewBox="0 0 24 24" width="18" height="18">
                    <path fill="currentColor" d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                </svg>
            </div>
        </div>
    `);
    
    // Add volume control to left column
    leftColumn.appendChild(volumeControl);
    
    // Assemble Player
    mainContent.append(leftColumn, centerColumn, rightColumn);
    playerContainer.append(mainContent);
    
    return playerContainer;
}

// Initialize Player (unchanged)
function initializePlayer() {
    let playlist = new Playlist();
    
    // Add songs to playlist with album names
    const songs = [
        new Song("AMERICA HAS A PROBLEM", "Beyoncé feat. Kendrick Lamar", "RENAISSANCE", "https://i.imgur.com/LGX5hoZ.png", "https://audio.jukehost.co.uk/PPFjWSpSqjnd6NScuR71GgYkBz9zZBA4"),
        new Song("360", "Charli XCX", "brat", "https://i.imgur.com/RgFsZmC.png", "https://audio.jukehost.co.uk/aLCl88f2lin2mBeCZ7JRjaLXeESejgBC"),
        new Song("HOT TO GO!", "Chappell Roan", "The Rise and Fall of a Midwest Princess", "https://i.imgur.com/lzmg2n9.png", "https://audio.jukehost.co.uk/uys8gRU2l3sBrTtzLK5SBn4X2ckrZTZc"),
        new Song("BOA", "Megan Thee Stallion", "MEGAN", "https://i.imgur.com/njsAlx6.jpeg", "https://audio.jukehost.co.uk/f8O0gJTK645gSdWDyVtvxlWaJ2eGgX9r"),
        new Song("Pretty In Possible", "Caroline Polachek", "Desire, I Want to Turn Into You", "https://i.imgur.com/t2RmsML.png", "https://audio.jukehost.co.uk/3vcVGEwiq1cQRBciMCZY3SikbMaFHXAl"),
        new Song("DEATH ROLL", "Doechii", "Alligator Bites Never Heal", "https://i.imgur.com/qXMvfTp.png", "https://audio.jukehost.co.uk/gc7gu2AGl2KN3NPHH6KL3XAPvJ7teY5S"),
        new Song("Fear, Sex", "Magdalena Bay", "Imaginal Disk", "https://i.imgur.com/peMnVE8.png", "https://audio.jukehost.co.uk/naH65z1MorbauSHkGmajEUPkhmLGDogJ"),
        new Song("AMERIICAN REQUIEM", "Beyoncé", "COWBOY CARTER", "https://i.imgur.com/bbi2JEl.png", "https://audio.jukehost.co.uk/p9McmBWz807ptTaPZUeihBfgXhrevPqg")
    ];
    
    songs.forEach(song => playlist.addSong(song));

    // Create and setup audio element
    const audio = createElement("audio", "", "", {
        id: "audio",
        src: playlist.getCurrentSong().audioLink
    });
    audio.volume = 0.5;

    // Create and setup player UI
    const playerContainer = createPlayerUI();
    document.getElementById("game_window").insertAdjacentElement("afterend", playerContainer);
    document.body.appendChild(audio);

    // Setup event listeners
    setupEventListeners(playlist, audio);
    updateUI(playlist);

    // Set initial play/pause state
    const playPauseButton = document.querySelector(".vista-play-btn");
    audio.play().then(() => {
        playPauseButton.innerHTML = `
            <svg viewBox="0 0 24 24" width="24" height="24">
                <rect x="6" y="4" width="4" height="16" fill="currentColor"/>
                <rect x="14" y="4" width="4" height="16" fill="currentColor"/>
            </svg>
        `;
        playPauseButton.classList.add("vista-pause-btn");
        playPauseButton.classList.remove("vista-play-btn");
    }).catch(e => {
        console.log("Autoplay prevented:", e);
        playPauseButton.innerHTML = `
            <svg viewBox="0 0 24 24" width="24" height="24">
                <path d="M8 5v14l11-7z" fill="currentColor"/>
            </svg>
        `;
    });

    // Expose to window (unchanged)
    window.Playlist = Playlist;
    window.Song = Song;
    window.changePlaylist = (newPlaylist) => {
        playlist = newPlaylist;
        playlist.currentSongIndex = 0;
        updateUI(playlist);
        audio.src = playlist.getCurrentSong().audioLink;
        audio.play();
    };
    window.updateUI = updateUI;
}

// Spotify-style CSS (updated)
const spotifyStyle = document.createElement("style");
spotifyStyle.textContent = `
.vista-player {
    width: 960px;
    height: 250px;
    position: relative;
    background: #121212 !important;            
    border: 1px solid #282828;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,.6);
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    display: flex;
    flex-direction: column;
    margin: 10px auto;
}

.vista-title-bar {
    background: #181818 !important;
    color: #fff;
    padding: 6px 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 12px;
    font-weight: 600;
    border-bottom: 1px solid #282828;
    user-select: none;
}

.vista-title-text { color: #1db954; }

.vista-title-controls button svg { filter: none; }

.vista-main-content {
    display: flex;
    flex: 1;
    padding: 6px;
    gap: 20px;
    height: calc(100% - 30px);
}

.vista-left-column {
    display: flex;
    flex-direction: column;
    width: 180px;
    gap: 0px;
    align-items: center;
}

.vista-cover {
    width: 160px;
    height: 160px;
    border-radius: 4px;
    border: none;
    box-shadow: 0 4px 12px rgba(0,0,0,0.5);
    object-fit: cover;
    flex-shrink: 0;
}

.vista-center-column {
    display: flex;
    flex-direction: column;
    flex: 1;
    justify-content: center;
    gap: 12px;
}

.vista-song-info { text-align: left; padding: 0 10px; }

.vista-title {
    margin: 0;
    font-size: 22px;
    color: #1db954;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.vista-artist {
    margin: 0;
    margin-bottom: 0 !important;
    font-size: 14px;
    color: #ffffffff;
}

.vista-album {
    margin: 0;
    font-size: 12px;
    color: #8d8d8d;
}

.vista-controls-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    width: 100%;
}

.vista-controls {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 12px;
}

.vista-control-btn {
    width: 44px;
    height: 44px;
    background: transparent !important;
    border: none !important;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: transform 0.1s ease;
}

.vista-control-btn svg {
    width: 24px;
    height: 24px;
    color: #fff;
}

.vista-control-btn:hover { transform: scale(1.12); }

.vista-play-btn svg,
.vista-pause-btn svg {
    width: 28px;
    height: 28px;
}

.vista-progress-container {
    width: 100%;
}

.vista-progress-track {
    height: 6px;
    background: #404040;
    border-radius: 3px;
    position: relative;
    width: 100%;
    cursor: pointer;
}

.vista-progress-fill {
    height: 100%;
    background: #1db954 !important;           
    border-radius: 3px;
    width: 0%;
    transition: width 0.1s linear;
}

.vista-time-display {
    display: flex;
    justify-content: space-between;
    width: 100%;
    font-size: 11px;
    color: #b3b3b3;
    margin-top: 4px;
}

.vista-volume-container { 
    width: 100%; 
    background: transparent; 
    padding: 0;
    margin-top: 8px;
}

.vista-volume-control {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 4px;
    width: 100%;
}

.vista-volume-slider {
    width: 100%;
    height: 6px;
    background: linear-gradient(to right, #1db954 0%, #1db954 var(--volume-level,50%), #404040 var(--volume-level,50%), #404040 100%);
    border-radius: 3px;
    cursor: pointer;
}

.vista-volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 14px;
    height: 14px;
    background: #fff;
    border-radius: 50%;
    cursor: pointer;
}

.vista-volume-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    background: #fff;
    border-radius: 50%;
    border: none;
    cursor: pointer;
}

.vista-volume-icons {
    display: flex;
    justify-content: space-between;
    width: 100%;
    padding: 0 2px;
}

.vista-volume-icon { 
    color: #fff; 
    width: 18px;
    height: 18px;
}

.vista-volume-icon:first-child {
    margin-right: 8px;
}

.vista-volume-icon:last-child {
    margin-left: 8px;
}

.vista-right-column {
    width: 220px;
    background: #181818;
    border-radius: 4px;
    padding: 12px;
    display: flex;
    flex-direction: column;
    height: 175px;
}

.vista-upcoming-header {
    font-weight: 600;
    color: #fff;
    margin-bottom: 8px;
    padding-bottom: 4px;
    border-bottom: 1px solid #282828;
    font-size: 13px;
}

.vista-upcoming-list {
    flex: 1;
    width: 100%;
}

.vista-upcoming-item {
    display: flex;
    align-items: center;
    padding: 4px 0;
    font-size: 12px;
    border-bottom: 1px solid #282828;
    gap: 6px;
    color: #b3b3b3;
    width: 100%;
}

.vista-upcoming-number {
    color: #fff;
    font-weight: 600;
    flex: 0 0 16px;
}

.vista-upcoming-title {
    color: #fff;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 1; /* Takes all available space */
    min-width: 0; /* Allows truncation */
}

.vista-upcoming-artist {
    color: #b3b3b3;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 0 1 80px; /* Fixed width with ability to shrink */
    text-align: right;
}
`;
document.head.appendChild(spotifyStyle);

// Initialize the player after DOM is fully loaded
initializePlayer();
